{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","margin","addPizza","display","addPizzaCardContent","justifyContent","addPizzaForm","moneyRegex","numberRegex","App","classes","useState","numPizzas","setNumPizzas","diameter","setDiameter","price","setPrice","choices","setChoices","className","Card","CardContent","map","choice","index","TextField","disabled","label","variant","pricePerUnit","toFixed","Button","color","type","onClick","choiceIndex","filter","length","tempBestChoice","lowestPricePerUnit","i","getBestChoice","onSubmit","event","persist","preventDefault","elements","target","value","radius","newElement","required","id","name","onChange","match","parseInt","handleNumPizzasChange","handleDiameterChange","handlePriceChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59a4cc91.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"90%\",\n    margin: 20\n  },\n  addPizza: {\n    width: \"90%\",\n    margin: 20,\n    display: 'flex'\n  },\n  addPizzaCardContent: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  addPizzaForm: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-between'\n  }\n});\n\ninterface Choice {\n  numPizzas: number;\n  diameter: number;\n  price: number;\n  pricePerUnit: number;\n}\n\nconst moneyRegex: RegExp = /^\\d{1,}(\\.\\d{0,2})?$/;\nconst numberRegex: RegExp = /^\\d+$/;\n\nfunction App() {\n\n  const handleNumPizzasChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    let value: string = event.target.value;\n    if (value.match(numberRegex) || value === '') {\n      setNumPizzas(parseInt(value));\n    }\n  }\n\n  const handleDiameterChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    let value: string = event.target.value;\n    if (value.match(numberRegex) || value === '') {\n      setDiameter(parseInt(value));\n    }\n  }\n\n  const handlePriceChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    let value: string = event.target.value;\n    if (value.match(moneyRegex) || value === '') {\n      setPrice(value);\n    }\n  }\n\n  const classes = useStyles();\n  const [numPizzas, setNumPizzas] = useState<number | null>();\n  const [diameter, setDiameter] = useState<number | null>();\n  const [price, setPrice] = useState<string>('');\n  const [choices, setChoices] = useState<Choice[] | []>([]);\n\n  const getBestChoice = () => {\n    let tempBestChoice = 0;\n    let lowestPricePerUnit = null;\n    let i = 1;\n    for (const choice in choices) {\n      if (!lowestPricePerUnit || choices[choice].pricePerUnit < lowestPricePerUnit) {\n        tempBestChoice = i;\n        lowestPricePerUnit = choices[choice].pricePerUnit;\n      }\n      i++;\n    }\n\n    return tempBestChoice;\n  }\n\n  const removeChoice = (choiceIndex: number) => {\n    setChoices(choices.filter((choice, index) => index !== choiceIndex))\n  }\n\n  return (\n    <div className=\"App\">\n      <Card className={classes.root}>\n        <CardContent>\n          <h1>Pizza Area Comparer</h1>\n          <h3>Find out which pizzas give the best deals</h3>\n        </CardContent>\n      </Card>\n\n      \n      {choices.map((choice: Choice, index: number) => {\n        return (\n          <div>\n            <Card className={classes.addPizza}>\n              <CardContent className={classes.addPizzaCardContent}>\n                <p>{index+1}.</p>\n                <TextField disabled label={\"Number:\" + choice.numPizzas} variant=\"outlined\" />\n                <TextField disabled label={\"Diameter:\" + choice.diameter} variant=\"outlined\" />\n                <TextField disabled label={\"Price:\" + choice.price} variant=\"outlined\" />\n                <TextField disabled label={\"Price per 'unit':\" + (choice.pricePerUnit*100).toFixed(3)} variant=\"outlined\" />\n                <Button variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={() => removeChoice(index)}>Remove</Button>\n              </CardContent>\n            </Card>\n        </div>\n      )})}\n\n      {choices.length > 1 && \n        <Card className={classes.addPizza}>\n          <CardContent className={classes.addPizzaCardContent}>\n            <p>Option <b>{getBestChoice()}</b> is the best value</p>\n          </CardContent>\n        </Card>\n      }\n\n      <Card className={classes.addPizza}>\n        <CardContent className={classes.addPizzaCardContent}>\n          <form  className={classes.addPizzaForm} onSubmit={event => {\n            event.persist();\n            event.preventDefault();\n\n            // @ts-ignore\n            const elements = event.target.elements;\n            const numPizzas = elements.numPizzas.value;\n            const diameter = elements.diameter.value\n            const price = elements.price.value;\n\n            setNumPizzas(null);\n            setDiameter(null);\n            setPrice('');\n\n            const radius = diameter/2;\n            const area = numPizzas * 3.14 * radius * radius;\n            const pricePerUnit = price / area;\n\n            const newElement = {\n              \"numPizzas\": numPizzas,\n              \"diameter\": diameter,\n              \"price\": price,\n              \"pricePerUnit\": pricePerUnit\n            }\n\n            setChoices([...choices, newElement]);\n          }}>\n            <TextField \n              required \n              id=\"num-pizzas-basic\" \n              name=\"numPizzas\" \n              label=\"Number\" \n              variant=\"outlined\" \n              value={numPizzas || ''}\n              onChange={event => handleNumPizzasChange(event)}\n            />\n            <TextField \n              required \n              id=\"diameter-basic\" \n              name=\"diameter\" \n              label=\"Diameter\" \n              variant=\"outlined\" \n              value={diameter || ''}\n              onChange={event => handleDiameterChange(event)}\n            />\n            <TextField \n              required \n              id=\"price-basic\" \n              name=\"price\" \n              label=\"Price\" \n              variant=\"outlined\" \n              value={price}\n              onChange={event => handlePriceChange(event)}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Add\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}